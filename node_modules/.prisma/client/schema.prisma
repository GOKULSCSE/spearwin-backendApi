generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUMS
// =================================================================

enum UserRole {
  CANDIDATE
  ADMIN
  SUPER_ADMIN
  COMPANY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum WorkMode {
  REMOTE
  ONSITE
  HYBRID
}

enum ApplicationStatus {
  APPLIED
  UNDER_REVIEW
  SHORTLISTED
  INTERVIEWED
  SELECTED
  REJECTED
  WITHDRAWN
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
}

enum EducationLevel {
  HIGH_SCHOOL
  DIPLOMA
  BACHELOR
  MASTER
  DOCTORATE
  PROFESSIONAL
}

enum NotificationType {
  JOB_ALERT
  APPLICATION_UPDATE
  SYSTEM_NOTIFICATION
  SECURITY_ALERT
  COMPANY_UPDATE
}

enum OTPType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum LogAction {
  LOGIN
  LOGOUT
  CREATE
  UPDATE
  DELETE
  VIEW
  APPLY
  APPROVE
  REJECT
}

// =================================================================
// LOCATION TABLES
// =================================================================

model Country {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String   @unique // ISO country code (e.g., IN, US)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  states State[]

  @@map("countries")
}

model State {
  id        String   @id @default(cuid())
  name      String
  code      String? // State code
  countryId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities  City[]

  @@unique([name, countryId])
  @@map("states")
}

model City {
  id        String   @id @default(cuid())
  name      String
  stateId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state      State       @relation(fields: [stateId], references: [id], onDelete: Cascade)
  pincodes   Pincode[]
  companies  Company[]
  jobs       Job[]
  candidates Candidate[]

  @@unique([name, stateId])
  @@map("cities")
}

model Pincode {
  id        String   @id @default(cuid())
  code      String
  area      String?
  cityId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@unique([code, cityId])
  @@map("pincodes")
}

// =================================================================
// USER MANAGEMENT
// =================================================================

model User {
  id               String     @id @default(cuid())
  email            String     @unique
  emailVerified    Boolean    @default(false)
  emailVerifiedAt  DateTime?
  phone            String?    @unique
  phoneVerified    Boolean    @default(false)
  phoneVerifiedAt  DateTime?
  password         String
  role             UserRole
  status           UserStatus @default(PENDING_VERIFICATION)
  lastLoginAt      DateTime?
  profileCompleted Boolean    @default(false)
  twoFactorEnabled Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Role-specific relations
  candidate  Candidate?
  admin      Admin?
  superAdmin SuperAdmin?
  company    Company?

  // Utility relations
  otps          OTP[]
  loginSessions LoginSession[]
  notifications Notification[]
  activityLogs  ActivityLog[]
  settings      UserSetting[]

  @@map("users")
}

model Candidate {
  id              String    @id @default(cuid())
  userId          String    @unique
  firstName       String
  lastName        String
  dateOfBirth     DateTime?
  gender          String?
  profilePicture  String?
  bio             String?
  currentTitle    String?
  experienceYears Int?
  expectedSalary  Decimal?
  cityId          String?
  address         String?
  linkedinUrl     String?
  githubUrl       String?
  portfolioUrl    String?
  isAvailable     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  city         City?                 @relation(fields: [cityId], references: [id])
  resumes      Resume[]
  applications JobApplication[]
  skills       CandidateSkill[]
  education    CandidateEducation[]
  experience   CandidateExperience[]
  jobAlerts    JobAlert[]

  @@map("candidates")
}

model Admin {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String
  lastName    String
  designation String?
  department  String?
  permissions Json? // Flexible permissions system
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]

  @@map("admins")
}

model SuperAdmin {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String
  lastName    String
  permissions Json? // Full system permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("super_admins")
}

model Company {
  id            String   @id @default(cuid())
  userId        String?  @unique // Optional for future when companies can self-register
  name          String
  slug          String   @unique
  description   String?
  website       String?
  logo          String?
  industry      String?
  foundedYear   Int?
  employeeCount String?
  headquarters  String?
  cityId        String?
  address       String?
  linkedinUrl   String?
  twitterUrl    String?
  facebookUrl   String?
  isVerified    Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  city City? @relation(fields: [cityId], references: [id])
  jobs Job[]

  @@map("companies")
}

// =================================================================
// CV/RESUME MANAGEMENT
// =================================================================

model Resume {
  id          String   @id @default(cuid())
  candidateId String
  title       String
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  isDefault   Boolean  @default(false)
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  candidate    Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  applications JobApplication[]

  @@map("resumes")
}

model CandidateSkill {
  id          String  @id @default(cuid())
  candidateId String
  skillName   String
  level       String? // Beginner, Intermediate, Advanced, Expert
  yearsUsed   Int?

  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([candidateId, skillName])
  @@map("candidate_skills")
}

model CandidateEducation {
  id           String         @id @default(cuid())
  candidateId  String
  institution  String
  degree       String
  fieldOfStudy String?
  level        EducationLevel
  startDate    DateTime
  endDate      DateTime?
  isCompleted  Boolean        @default(false)
  grade        String?
  description  String?
  createdAt    DateTime       @default(now())

  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("candidate_education")
}

model CandidateExperience {
  id           String    @id @default(cuid())
  candidateId  String
  company      String
  position     String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  isCurrent    Boolean   @default(false)
  location     String?
  achievements String?
  createdAt    DateTime  @default(now())

  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("candidate_experience")
}

// =================================================================
// JOB MANAGEMENT
// =================================================================

model Job {
  id               String          @id @default(cuid())
  title            String
  slug             String          @unique
  description      String
  requirements     String?
  responsibilities String?
  benefits         String?
  companyId        String
  postedById       String? // Admin who posted (if posted by admin)
  cityId           String?
  address          String?
  jobType          JobType
  workMode         WorkMode
  experienceLevel  ExperienceLevel
  minExperience    Int?
  maxExperience    Int?
  minSalary        Decimal?
  maxSalary        Decimal?
  salaryNegotiable Boolean         @default(false)
  skillsRequired   String[] // Array of skill names
  educationLevel   EducationLevel?
  applicationCount Int             @default(0)
  viewCount        Int             @default(0)
  status           JobStatus       @default(DRAFT)
  expiresAt        DateTime?
  publishedAt      DateTime?
  closedAt         DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  postedBy     Admin?           @relation(fields: [postedById], references: [id], onDelete: SetNull)
  city         City?            @relation(fields: [cityId], references: [id])
  applications JobApplication[]

  @@index([status, publishedAt])
  @@index([companyId, status])
  @@index([cityId, status])
  @@map("jobs")
}

model JobApplication {
  id          String            @id @default(cuid())
  jobId       String
  candidateId String
  resumeId    String?
  coverLetter String?
  status      ApplicationStatus @default(APPLIED)
  appliedAt   DateTime          @default(now())
  reviewedAt  DateTime?
  reviewedBy  String? // Admin/Company user who reviewed
  feedback    String?
  updatedAt   DateTime          @updatedAt

  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  resume    Resume?   @relation(fields: [resumeId], references: [id], onDelete: SetNull)

  @@unique([jobId, candidateId])
  @@index([candidateId, status])
  @@index([jobId, status])
  @@map("job_applications")
}

model JobAlert {
  id              String    @id @default(cuid())
  candidateId     String
  title           String
  keywords        String?
  location        String?
  skills          String[] // Array of skill names
  jobType         String?
  experienceLevel String?
  company         String?
  isActive        Boolean   @default(true)
  frequency       String    @default("WEEKLY") // DAILY, WEEKLY, MONTHLY
  lastSentAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@index([candidateId, isActive])
  @@index([frequency, isActive])
  @@map("job_alerts")
}

// =================================================================
// SECURITY & UTILITY TABLES
// =================================================================

model OTP {
  id        String    @id @default(cuid())
  userId    String
  code      String
  type      OTPType
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, used])
  @@map("otps")
}

model LoginSession {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  userAgent    String?
  ipAddress    String?
  location     String?
  deviceInfo   String?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([sessionToken])
  @@map("login_sessions")
}

model ActivityLog {
  id          String    @id @default(cuid())
  userId      String?
  action      LogAction
  level       LogLevel  @default(INFO)
  entity      String? // Table/resource affected
  entityId    String? // ID of the affected record
  description String
  metadata    Json? // Additional context data
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, action])
  @@index([level, createdAt])
  @@index([entity, entityId])
  @@map("activity_logs")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional notification data
  isRead    Boolean          @default(false)
  readAt    DateTime?
  expiresAt DateTime?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([type, createdAt])
  @@map("notifications")
}

model NotificationTemplate {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  type        NotificationType
  title       String
  message     String
  defaultData Json? // Default data for the template
  variables   String[] // Array of variable names that can be used in the template
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("notification_templates")
}

model UserSetting {
  id       String  @id @default(cuid())
  userId   String
  key      String
  value    String
  category String? // Group settings by category

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_settings")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String?
  isPublic    Boolean  @default(false) // Whether this setting is visible to frontend
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("system_settings")
}
